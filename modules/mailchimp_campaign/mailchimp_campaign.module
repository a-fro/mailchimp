<?php
/**
 * @file
 * Module file for mailchimp_campaign.
 */

use \Mailchimp\MailchimpAPIException;
use \Mailchimp\MailchimpCampaigns;
use \Drupal\mailchimp_campaign\Entity\MailchimpCampaign;
use Drupal\Core\Cache\CacheBackendInterface;
use Drupal\Core\Entity;

/**
 * Implements hook_entity_storage_load()
 */
function mailchimp_campaign_entity_storage_load(array $entities, $entity_type) {
  if ($entity_type != 'mailchimp_campaign') {
    return;
  }

  $ids = array();
  if (!empty($entities)) {
    /* @var $campaign \Drupal\mailchimp_campaign\Entity\MailchimpCampaign */
    foreach ($entities as $campaign) {
      $ids[] = $campaign->getMcCampaignId();
    }
  }
  $mc_campaigns = mailchimp_campaign_get_campaigns($ids);

  foreach ($entities as $mc_campaign_id => $campaign) {
    $campaign->mc_data = $mc_campaigns[$mc_campaign_id];

    // Lists are cached separately, but we want to load them here.
    if (isset($campaign->mc_data->recipients->list_id) && $campaign->mc_data->recipients->list_id) {
      $campaign->list = mailchimp_get_list($campaign->mc_data->recipients->list_id);
    }

    if (isset($campaign->mc_data->settings->template_id) && $campaign->mc_data->settings->template_id) {
      $campaign->mc_template = mailchimp_campaign_get_template($campaign->mc_data->settings->template_id);
    }
  }
}

/**
 * Implements hook_theme().
 */
function mailchimp_campaign_theme($existing, $type, $theme, $path) {
  return array(
    'mailchimp_campaign_node_campaigns_list' => array(
      'variables' => array('node_campaigns' => array()),
    ),
    'mailchimp_campaign_mclinks' => array(
      'variables' => array('data' => NULL),
    ),
    'mailchimp_campaign_actions' => array(
      'variables' => array('campaign' => NULL),
    ),
  );
}

/**
 * Save a campaign in MailChimp and as a Drupal entity.
 *
 * @param array $template
 *   Associative array of template content indexed by section IDs.
 * @param object $recipients
 *   Associative array of template values.
 * @param string $campaign_id
 *   The ID of the campaign to save, if updating.
 *
 * @return string
 *   New or existing campaign ID.
 */
function mailchimp_campaign_save_campaign($template, $recipients, $settings, $template_id, $campaign_id = NULL) {
  /* @var \Mailchimp\MailchimpCampaigns $mcapi */
  $mcapi = mailchimp_get_api_object('MailchimpCampaigns');

  // Allow alter of template and options used in campaign
  \Drupal::moduleHandler()->alter('mailchimp_campaign', $recipients, $template, $campaign_id);

  // Convert template to content by running through formatter.
  if (isset($template['html'])) {
    $content = mailchimp_campaign_render_template($template);
  }
  else {
    $content = array(
      'sections' => mailchimp_campaign_render_template($template),
    );
  }

  // Save campaign to MailChimp. (Only regular campaigns are supported).
  $is_new = empty($campaign_id);
  if ($is_new) {
    try {
      if (!$mcapi) {
        throw new MailchimpAPIException('Cannot create campaign without Mailchimp API. Check API key has been entered.');
      }

      $result = $mcapi->addCampaign(\Mailchimp\MailchimpCampaigns::CAMPAIGN_TYPE_REGULAR, $recipients, $settings);

      if (!empty($result->id)) {
        $mcapi->setCampaignContent($result->id, array(
          'template' => (object) array(
            'id' => (int) $template_id,
            'sections' => (object) $content['sections'],
          ),
        ));
      }
    }
    catch (MailchimpAPIException $e) {
      drupal_set_message($e->getMessage(), 'error');
      \Drupal::logger('mailchimp_campaign')->error('An error occurred while creating this campaign: {message}', array(
        'message' => $e->getMessage()));
      return NULL;
    }
    if (isset($result) && !empty($result->id)) {
      $campaign_id = $result->id;
    }
  }
  else {
    // Updates must be sent one type at a time.
    try {
      if (!$mcapi) {
        throw new MailchimpAPIException('Cannot update campaign without Mailchimp API. Check API key has been entered.');
      }

      $mcapi->updateCampaign($campaign_id, \Mailchimp\MailchimpCampaigns::CAMPAIGN_TYPE_REGULAR);

      // TODO: Convert to v3 API.

      //$mcapi->campaigns->update($campaign_id, 'options', $recipients);
      //$mcapi->campaigns->update($campaign_id, 'segment_opts', $segment_options);
      //$mcapi->campaigns->update($campaign_id, 'content', $content);
    }
    catch (MailchimpAPIException $e) {
      drupal_set_message($e->getMessage(), 'error');
      \Drupal::logger('mailchimp_campaign')->error(
        'An error occurred while updating this campaign: @msg',
        array('@msg' => $e->getMessage()));
      return NULL;
    }
  }

  if (!isset($result->id)) {
    // Display and log error, if any.
    $message = 'MailChimp error. The campaign was not saved.';
    _mailchimp_campaign_mcapi_error_message($result, $message);
  }
  else {
    drupal_set_message(t('Campaign %name (%cid) was successfully saved.',
      array('%name' => $recipients->title, '%cid' => $campaign_id)));

    // Clear cached data for this campaign.
    mailchimp_campaign_get_campaigns(array($campaign_id), TRUE);
  }

  return $campaign_id;
}

/**
 * Sends a MailChimp campaign.
 *
 * @param \Drupal\mailchimp_campaign\Entity\MailchimpCampaign $campaign
 *   The MailChimp campaign to send.
 *
 * @return bool
 *   TRUE if campaign is sent successfully.
 */
function mailchimp_campaign_send_campaign(MailChimpCampaign $campaign) {
  $mcapi = mailchimp_get_api_object('MailchimpCampaigns');

  try {
    $result = $mcapi->campaigns->send($campaign->getMcCampaignId());
  }
  catch (MailchimpAPIException $e) {
    drupal_set_message($e->getMessage(), 'error');
    \Drupal::logger('mailchimp_campaign')->error('An error occurred while sending to this campaign: {message}', array(
      'message' => $e->getMessage()));

    return FALSE;
  }

  if (isset($result['complete']) && ($result['complete'] === TRUE)) {
    // Log action, and notify the user.
    \Drupal::logger('mailchimp_campaign')->error('MailChimp campaign {name} has been sent.', array(
      'name' => $campaign->label()));

    $controller = \Drupal::entityManager()->getStorage('mailchimp_campaign');
    $controller->resetCache(array($campaign->getMcCampaignId()));

    $cache = \Drupal::cache('mailchimp');
    $cache->invalidate('campaigns');

    return TRUE;
  }
  elseif (isset($result['status']) && ($result['status'] == 'error')) {
    // Display and log error, if any.
    $message = 'MailChimp error. The campaign was not sent.';
    _mailchimp_campaign_mcapi_error_message($result, $message);
  }

  return FALSE;
}

/**
 * Delete a MailChimp campaign and the local entity.
 */
function mailchimp_campaign_delete_campaign($campaign) {
  /* @var \Mailchimp\MailchimpCampaigns $mc_campaign */
  $mc_campaign = mailchimp_get_api_object('MailchimpCampaigns');

  $result = NULL;

  // Delete campaign from MailChimp.
  try {
    if (!$mc_campaign) {
      throw new MailchimpAPIException('Cannot delete campaign without Mailchimp API. Check API key has been entered.');
    }

    $mc_campaign->delete($campaign->mc_data->id);
    mailchimp_campaign_delete($campaign);

    \Drupal::logger('mailchimp_campaign')->info('MailChimp campaign {cid} was deleted.', array(
      'cid' => $campaign->id()));

    return TRUE;
  }
  catch (MailchimpAPIException $e) {
    drupal_set_message($e->getMessage(), 'error');
    \Drupal::logger('mailchimp_campaign')->error('An error occurred while deleting this campaign: {message}', array(
      'message' => $e->getMessage()));
    return FALSE;
  }
}

/**
 * Return all available user templates.
 *
 * @param bool $reset
 *   True if templates should not be loaded from cache.
 *
 * @return mixed
 *   Array listing existing Mailchimp templates by type.
 */
function mailchimp_campaign_list_templates($reset = FALSE) {
  $cache = \Drupal::cache('mailchimp');
  $cached_templates = $cache->get('templates');

  $all_templates = array();

  // Return cached lists.
  if (!$reset && !empty($cached_templates)) {
    $all_templates = $cached_templates->data;
  }
  // Query lists from the MailChimp API and store in cache.
  else {
    /* @var \Mailchimp\MailchimpTemplates $mc_templates */
    if ($mc_templates = mailchimp_get_api_object('MailchimpTemplates')) {
      $template_types = array(
        'user' => 1,
        'base' => 1,
        'gallery' => 1,
      );

      foreach ($template_types as $type => $chosen) {
        if ($chosen) {
          $all_templates[$type] = array();

          $response = $mc_templates->getTemplates(array('type' => $type));

          foreach ($response->templates as $template) {
            $all_templates[$type][$template->id] = $template;
          }
        }
      }
    }

    $cache->set('templates', $all_templates);
  }

  return $all_templates;
}

/**
 * Return full details for a Mailchimp Template.
 *
 * @param string $template_id
 *   Optional template ID. Set to return a single MailChimp template.
 * @param bool $reset
 *   True if templates should not be loaded from cache.
 *
 * @return mixed
 *   An array with all configuration and content for a Mailchimp Template.
 */
function mailchimp_campaign_get_template($template_id, $reset = FALSE) {
  $all_templates = mailchimp_campaign_list_templates($reset);

  foreach ($all_templates as $type) {
    if (isset($type[$template_id])) {
      $template = $type[$template_id];

      // Get template details from cache or the MailChimp API.
      $cache = $reset ? NULL : \Drupal::cache()->get('template_' . $template_id, 'cache_mailchimp');
      if ($cache) {
        $template->info = $cache->data;
      }
      else {
        /* @var \Mailchimp\MailchimpTemplates $mc_templates */
        if ($mc_templates = mailchimp_get_api_object('MailchimpTemplates')) {
          $template->info = $mc_templates->getTemplateContent($template_id);
          $tags = array('cache_mailchimp');
          \Drupal::cache()->set('template_' . $template_id, $template->info, CacheBackendInterface::CACHE_PERMANENT, $tags);
        }
      }
//      if (!$reset && !empty($cached_template)) {
//        $template['info'] = $cached_template->data;
//      }
//      else {
//        if ($mcapi = mailchimp_get_api_object()) {
//          $template['info'] = $mcapi->templates->info($template_id);
//          $cache->set('template_' . $template_id, $template['info']);
//        }
//      }

      return $template;
    }
  }

  return NULL;
}

/**
 * Set and log error messages after MailChimp API errors.
 */
function _mailchimp_campaign_mcapi_error_message($result, $message, $variables = array()) {
  $mcapi_error_message = 'MailChimp error code: %errorCode, MailChimp error message: %errorMessage.';

  $mcapi_error_variables = array(
    '%errorCode' => $result['code'],
    '%errorMessage' => $result['message'],
  );

  $human = t($message, $variables) . ' ' . t($mcapi_error_message, $mcapi_error_variables);
  drupal_set_message($human, 'error');

  $log = $message . ' ' . $mcapi_error_message;
  $variables = $variables + $mcapi_error_variables;
  \Drupal::logger('mailchimp_campaign')->error($log, $variables);
}

/**
 * Convert an array of templates into rendered content.
 *
 * @param array $template
 *   Array keyed by the section name with a value of the template.
 *
 * @return array
 *   Array of template content indexed by section ID.
 */
function mailchimp_campaign_render_template($template) {
  $content = array();

  foreach ($template as $key => $part) {
    if (isset($part['format'])) {
      $content[$key] = check_markup($part['value'], $part['format']);
    }
  }

  return $content;
}

/**
 * Get MailChimp campaigns.
 *
 * @param array $mc_campaign_ids
 *   Array of MailChimp campaign IDs.
 * @param bool $reset
 *   Set to TRUE if campaigns should not be loaded from cache.
 *
 * @return array
 *   Associative array of MailChimp campaigns indexed by campaign ID.
 */
function mailchimp_campaign_get_campaigns($mc_campaign_ids, $reset = FALSE) {
  $cache = \Drupal::cache('mailchimp');
  $cached_campaigns = $cache->get('campaigns');

  $campaigns = array();
  foreach ($mc_campaign_ids as $id) {
    if (!isset($cached_campaigns->data[$id])
      || ($cached_campaigns->data[$id]['status'] == MAILCHIMP_STATUS_SENDING)
      || $reset) {
      $to_refresh[] = $id;
    }
    else {
      $campaigns[$id] = $cached_campaigns->data[$id];
    }
  }

  if (!empty($to_refresh)) {
    /* @var \Mailchimp\MailchimpCampaigns $mcapi */
    $mcapi = mailchimp_get_api_object('MailchimpCampaigns');

    try {
      if (!$mcapi) {
        throw new MailchimpAPIException('Cannot get list without MailChimp API. Check API key has been entered.');
      }

      foreach ($to_refresh as $campaign_id) {
        $response = $mcapi->getCampaign($campaign_id);

        if (!empty($response->id)) {
          $campaigns[$response->id] = $response;
        }
      }
    }

    catch (MailchimpAPIException $e) {
      drupal_set_message($e->getMessage(), 'error');
      \Drupal::logger('mailchimp_campaign')->error('An error occurred while getting campaigns: {message}', array(
        'message' => $e->getMessage()));

      return NULL;
    }

    $cache->set('campaigns', $campaigns);
  }

  return $campaigns;
}

/**
 * Gets an array of list segments for a given list ID.
 *
 * @param int $list_id
 *   The list ID.
 * @param string $type
 *   The segment type to get. "static" or "saved"
 *
 * @return array
 *   Array of MailChimp list segments.
 */
function mailchimp_campaign_get_list_segments($list_id, $type) {
  /* @var \Mailchimp\MailchimpLists $mcapi */
  $mcapi = mailchimp_get_api_object('MailchimpLists');

  try {
    $response = $mcapi->getSegments($list_id, $type);
  }
  catch (MailchimpAPIException $e) {
    drupal_set_message($e->getMessage(), 'error');
    \Drupal::logger('mailchimp_campaign')->error('An error occurred getting list segments for list ID {list_id}: {message} ', array(
      'list_id' => $list_id,
      'message' => $e->getMessage(),
    ));

    return NULL;
  }

  return $response->segments;
}

/**
 * Tests a list segment, returning the number of subscribers in the segment.
 *
 * @param string $list_id
 *   The list ID.
 * @param string $list_segment_id
 *   The list segment ID.
 *
 * @return int
 *   The number of subscribers contained in the segment.
 */
function mailchimp_test_list_segment($list_id, $list_segment_id) {
  $mcapi = mailchimp_get_api_object('MailchimpCampaigns');

  try {
    $result = $mcapi->campaigns->segmentTest($list_id,
      array('saved_segment_id' => $list_segment_id));
  }
  catch (MailchimpAPIException $e) {
    drupal_set_message($e->getMessage(), 'error');
    \Drupal::logger('mailchimp_campaign')->error('An error occurred testing a list segment: {message}', array(
      'message' => $e->getMessage()));

    return NULL;
  }

  return $result['total'];
}

/**
 * Loads multiple campaigns.
 */
function mailchimp_campaign_load_multiple($campaign_ids = array(), $reset = FALSE) {
  if (empty($campaign_ids)) {
    $campaign_ids = Drupal::entityQuery('mailchimp_campaign')
      ->sort('created', 'DESC')
      ->execute();
  }

  $controller = \Drupal::entityManager()->getStorage('mailchimp_campaign');

  if ($reset) {
    $controller->resetCache($campaign_ids);
  }

  return $controller->loadMultiple($campaign_ids);
}

/**
 * Saves a campaign.
 */
function mailchimp_campaign_save(MailChimpCampaign $campaign) {
  $campaign->updated = REQUEST_TIME;
  // Set the creation timestamp if not set.
  if (!isset($campaign->created) || empty($campaign->created)) {
    $campaign->created = REQUEST_TIME;
  }

  return $campaign->save();
}

/**
 * Delete a campaign.
 */
function mailchimp_campaign_delete($cid) {
  return mailchimp_campaign_delete_multiple(array($cid));
}

/**
 * Delete multiple campaigns.
 */
function mailchimp_campaign_delete_multiple($campaign_ids) {
  return \Drupal::entityManager()->getStorage('mailchimp_campaign')->delete($campaign_ids);
}

/**
 * Display a campaign.
 *
 * @param object $campaign
 *   A fully loaded campaign object.
 *
 * @return array
 *   Renderable elements.
 */
function mailchimp_campaign_view($campaign) {
  return $campaign->view();
}
